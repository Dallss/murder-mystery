============================= test session starts =============================
platform win32 -- Python 3.13.3, pytest-8.4.0, pluggy-1.6.0 -- C:\Python313\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\Nitro-5\OneDrive\Documents\Acads\4Y2S\murder-mystery
plugins: anyio-4.9.0, asyncio-1.0.0, mock-3.14.1
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collecting ... collected 11 items

backend/tests/test_story_routes.py::test_create_story FAILED             [  9%]
backend/tests/test_story_routes.py::test_get_story FAILED                [ 18%]
backend/tests/test_story_routes.py::test_process_action FAILED           [ 27%]
backend/tests/test_story_routes.py::test_get_choices FAILED              [ 36%]
backend/tests/test_story_routes.py::test_save_story FAILED               [ 45%]
backend/tests/test_story_routes.py::test_unauthorized_access FAILED      [ 54%]
backend/tests/test_story_routes.py::test_invalid_story_id FAILED         [ 63%]
backend/tests/test_story_routes.py::test_get_stories FAILED              [ 72%]
backend/tests/test_story_routes.py::test_get_story_progress FAILED       [ 81%]
backend/tests/test_story_routes.py::test_perform_action FAILED           [ 90%]
backend/tests/test_story_routes.py::test_make_choice FAILED              [100%]

================================== FAILURES ===================================
______________________________ test_create_story ______________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
auth_headers = {'Authorization': 'Bearer test-token'}
mock_supabase = <backend.tests.mocks.supabase_mock.MockSupabaseClient object at 0x000001B6F5EA52B0>
sample_story_data = {'created_at': '2025-06-05T02:29:19.028728', 'current_scene': 'introduction', 'discovered_clues': [], 'id': '123e4567-e89b-12d3-a456-426614174000', ...}

    def test_create_story(client, auth_headers, mock_supabase, sample_story_data):
        """Test creating a new story."""
        # Set up mock data
        mock_supabase.table('stories').data = [sample_story_data]
        # Make request
        response = client.post(
            '/api/stories',
            headers=auth_headers,
            json={'mystery_id': 'mystery123'}
        )
        # Check response
>       assert response.status_code == 201
E       assert 422 == 201
E        +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:298: AssertionError
_______________________________ test_get_story ________________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
auth_headers = {'Authorization': 'Bearer test-token'}
mock_supabase = <backend.tests.mocks.supabase_mock.MockSupabaseClient object at 0x000001B6F5DF3610>
sample_story_data = {'created_at': '2025-06-05T02:29:19.397624', 'current_scene': 'introduction', 'discovered_clues': [], 'id': '123e4567-e89b-12d3-a456-426614174000', ...}

    def test_get_story(client, auth_headers, mock_supabase, sample_story_data):
        """Test getting a specific story."""
        # Set up mock data
        mock_supabase.table('stories').data = [sample_story_data]
        # Make request
        response = client.get(
            f'/api/stories/{sample_story_data["id"]}',
            headers=auth_headers
        )
        # Check response
>       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:283: AssertionError
_____________________________ test_process_action _____________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
mock_story_service = <MagicMock name='get_story_service()' id='1885321457552'>
auth_headers = {'Authorization': 'Bearer test-token'}

    @pytest.mark.asyncio
    async def test_process_action(client, mock_story_service, auth_headers):
        # Mock the JWT identity
        with patch('flask_jwt_extended.get_jwt_identity', return_value='test-user'):
            # Mock the story service response
            story_id = uuid4()
            mock_response = StoryResponse(
                story_id=story_id,
                narrative="Test narrative",
                choices=[
                    StoryChoice(id="1", text="Choice 1"),
                    StoryChoice(id="2", text="Choice 2")
                ],
                discovered_clues=[],
                suspect_states={},
                current_scene="test_scene"
            )
            mock_story_service.process_action.return_value = mock_response
    
            # Make the request
            response = client.post(
                f'/api/stories/{story_id}/actions',
                json={
                    'action_type': 'examine',
                    'content': 'Look at the bookshelf'
                },
                headers=auth_headers
            )
    
            # Assert response
>           assert response.status_code == 200
E           assert 422 == 200
E            +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:169: AssertionError
______________________________ test_get_choices _______________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
mock_story_service = <MagicMock name='get_story_service()' id='1885321955040'>
auth_headers = {'Authorization': 'Bearer test-token'}

    @pytest.mark.asyncio
    async def test_get_choices(client, mock_story_service, auth_headers):
        # Mock the JWT identity
        with patch('flask_jwt_extended.get_jwt_identity', return_value='test-user'):
            # Mock the story service response
            story_id = uuid4()
            mock_choices = [
                StoryChoice(id='1', text='Continue investigation'),
                StoryChoice(id='2', text='Examine clues')
            ]
            mock_story_service.get_available_choices.return_value = mock_choices
    
            # Make the request
            response = client.post(
                f'/api/stories/{story_id}/choices',
                headers=auth_headers,
                json={}
            )
    
            # Assert response
>           assert response.status_code == 200
E           assert 422 == 200
E            +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:195: AssertionError
_______________________________ test_save_story _______________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
mock_story_service = <MagicMock name='get_story_service()' id='1885321960080'>
auth_headers = {'Authorization': 'Bearer test-token'}

    @pytest.mark.asyncio
    async def test_save_story(client, mock_story_service, auth_headers):
        # Mock the JWT identity
        with patch('flask_jwt_extended.get_jwt_identity', return_value='test-user'):
            # Mock the story service response
            story_id = uuid4()
            mock_story = StoryState(
                id=story_id,
                mystery_id=uuid4(),
                user_id='test-user',
                current_scene='introduction'
            )
            mock_story_service.get_story.return_value = mock_story
            mock_story_service.save_story_state.return_value = None
    
            # Make the request
            response = client.post(
                f'/api/stories/{story_id}/save',
                headers=auth_headers
            )
    
            # Assert response
>           assert response.status_code == 200
E           assert 404 == 200
E            +  where 404 = <WrapperTestResponse streamed [404 NOT FOUND]>.status_code

backend\tests\test_story_routes.py:223: AssertionError
__________________________ test_unauthorized_access ___________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
mock_story_service = <MagicMock name='get_story_service()' id='1885321459904'>
auth_headers = {'Authorization': 'Bearer test-token'}

    @pytest.mark.asyncio
    async def test_unauthorized_access(client, mock_story_service, auth_headers):
        # Mock the JWT identity
        with patch('flask_jwt_extended.get_jwt_identity', return_value='test-user'):
            # Mock the story service to raise an unauthorized error
            story_id = uuid4()
            mock_story_service.get_story.side_effect = Exception("Unauthorized access to story")
    
            # Make the request
            response = client.get(
                f'/api/stories/{story_id}',
                headers=auth_headers
            )
    
            # Assert response
>           assert response.status_code == 500
E           assert 422 == 500
E            +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:242: AssertionError
____________________________ test_invalid_story_id ____________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
mock_story_service = <MagicMock name='get_story_service()' id='1885321446464'>
auth_headers = {'Authorization': 'Bearer test-token'}

    @pytest.mark.asyncio
    async def test_invalid_story_id(client, mock_story_service, auth_headers):
        # Mock the JWT identity
        with patch('flask_jwt_extended.get_jwt_identity', return_value='test-user'):
            # Make the request with an invalid UUID
            response = client.get(
                '/api/stories/invalid-uuid',
                headers=auth_headers
            )
    
            # Assert response
>           assert response.status_code == 404
E           assert 422 == 404
E            +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:257: AssertionError
______________________________ test_get_stories _______________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
auth_headers = {'Authorization': 'Bearer test-token'}
mock_supabase = <backend.tests.mocks.supabase_mock.MockSupabaseClient object at 0x000001B6F5DF3250>
sample_story_data = {'created_at': '2025-06-05T02:29:19.555021', 'current_scene': 'introduction', 'discovered_clues': [], 'id': '123e4567-e89b-12d3-a456-426614174000', ...}

    def test_get_stories(client, auth_headers, mock_supabase, sample_story_data):
        """Test getting all stories for a user."""
        # Set up mock data
        mock_supabase.table('stories').data = [sample_story_data]
        # Make request
        response = client.get('/api/stories', headers=auth_headers)
        # Check response
>       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:268: AssertionError
___________________________ test_get_story_progress ___________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
auth_headers = {'Authorization': 'Bearer test-token'}
mock_supabase = <backend.tests.mocks.supabase_mock.MockSupabaseClient object at 0x000001B6F5DEEB10>

    async def test_get_story_progress(client, auth_headers, mock_supabase):
        """Test getting story progress."""
        # Set up mock data
        mock_supabase.table('stories').data = [{'game_progress': 0.5}]
        # Make request
        response = client.get(
            '/api/stories/123e4567-e89b-12d3-a456-426614174000/progress',
            headers=auth_headers
        )
        # Check response
>       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:312: AssertionError
_____________________________ test_perform_action _____________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
auth_headers = {'Authorization': 'Bearer test-token'}
mock_supabase = <backend.tests.mocks.supabase_mock.MockSupabaseClient object at 0x000001B6F5FA8050>
sample_action_data = {'action_type': 'examine', 'content': 'Look at the desk', 'target_id': 'desk1'}

    async def test_perform_action(client, auth_headers, mock_supabase, sample_action_data):
        """Test performing an action in the story."""
        # Set up mock data
        mock_supabase.table('actions').data = [{
            'id': 'action1',
            'story_id': '123e4567-e89b-12d3-a456-426614174000',
            **sample_action_data
        }]
        # Make request
        response = client.post(
            '/api/stories/123e4567-e89b-12d3-a456-426614174000/actions',
            headers=auth_headers,
            json=sample_action_data
        )
        # Check response
>       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:331: AssertionError
______________________________ test_make_choice _______________________________

client = <FlaskClient <Flask 'backend.tests.test_story_routes'>>
auth_headers = {'Authorization': 'Bearer test-token'}
mock_supabase = <backend.tests.mocks.supabase_mock.MockSupabaseClient object at 0x000001B6EFAA8710>
sample_choice_data = {'choice_text': 'Open the drawer', 'consequences': {'reveals_clue': 'clue1'}}

    async def test_make_choice(client, auth_headers, mock_supabase, sample_choice_data):
        """Test making a choice in the story."""
        # Set up mock data
        mock_supabase.table('choices').data = [{
            'id': 'choice1',
            'story_id': '123e4567-e89b-12d3-a456-426614174000',
            **sample_choice_data
        }]
        # Make request
        response = client.post(
            '/api/stories/123e4567-e89b-12d3-a456-426614174000/choices',
            headers=auth_headers,
            json=sample_choice_data
        )
        # Check response
>       assert response.status_code == 200
E       assert 422 == 200
E        +  where 422 = <WrapperTestResponse streamed [422 UNPROCESSABLE ENTITY]>.status_code

backend\tests\test_story_routes.py:350: AssertionError
=========================== short test summary info ===========================
FAILED backend/tests/test_story_routes.py::test_create_story - assert 422 == 201
FAILED backend/tests/test_story_routes.py::test_get_story - assert 422 == 200
FAILED backend/tests/test_story_routes.py::test_process_action - assert 422 =...
FAILED backend/tests/test_story_routes.py::test_get_choices - assert 422 == 200
FAILED backend/tests/test_story_routes.py::test_save_story - assert 404 == 200
FAILED backend/tests/test_story_routes.py::test_unauthorized_access - assert ...
FAILED backend/tests/test_story_routes.py::test_invalid_story_id - assert 422...
FAILED backend/tests/test_story_routes.py::test_get_stories - assert 422 == 200
FAILED backend/tests/test_story_routes.py::test_get_story_progress - assert 4...
FAILED backend/tests/test_story_routes.py::test_perform_action - assert 422 =...
FAILED backend/tests/test_story_routes.py::test_make_choice - assert 422 == 200
============================= 11 failed in 0.62s ==============================
